#!/bin/sh
#
# Check what's installed on a PCP/PCPQA VM looking for missing apps
# and packages
#

# same function is in allow-pmlc-access ... need to track changes
#
_getnetworkaddr()
{
    __verbose=false
    if `which hostname >/dev/null 2>&1`
    then
	host=`hostname`
	if `which host >/dev/null 2>&1`
	then
	    host_out=`host $host`
	    if echo "$host_out" | grep ' has address ' >/dev/null
	    then
		addr=`echo "$host_out" | sed -e 's/.*address //'`
		$__verbose && echo "_getnetworkaddr: host -> addr=$addr" >&2
		if `which ifconfig >/dev/null 2>&1`
		then
		    # ifconfig line of interest looks like:
		    # inet 192.168.1.100  netmask 255.255.255.0  ...
		    # or
		    # inet addr:192.168.1.224  Bcast:192.168.1.255  Mask:255.255.255.0
		    #
		    mask=`ifconfig | grep "[ :]$addr " | sed -e 's/.*ask[ :]\([^ ][^ ]*\).*/\1/'`
		    $__verbose && echo "_getnetworkaddr: ifconfig -> mask=$mask" >&2
		    case "$mask"
		    in
			255.255.255.0|0xffffff00|ffffff00)	# /24 network
			    echo "$addr" | sed -e 's/\.[0-9]*$/.*/'
			    ;;
			# pmcd's [access] is not smart enough to handle other
			# than /24 networks, so map the other likely options
			# to the broader /24 network
			#
			255.255.255.128|255.255.255.192|255.255.255.224|255.255.255.240|255.255.255.248|255.255.255.252|255.255.255.254)
			    echo "$addr" | sed -e 's/\.[0-9]*$/.*/'
			    ;;
			*)
			    echo >&2 "_getnetworkaddr: Warning: cannot handle network mask: $mask"
			    ;;
		    esac
		elif `which ip >/dev/null 2>&1`
		then
		    # ip line of interest looks like:
		    # 4: br0    inet 192.168.1.100/24 ...
		    #
		    mask=`ip -f inet -o address | grep " $addr/" | sed -e 's/.*inet //' -e 's/[0-9.][0-9.]*\/\([^ ][^ ]*\) .*/\1/'`
		    $__verbose && echo "_getnetworkaddr: ip -> mask=$mask" >&2
		    if [ "$mask" != 24 ]
		    then
			# pmcd's [access] is not smart enough to handle other
			# than /24 networks, so map the other likely options
			echo >&2 "_getnetworkaddr: Warning: cannot handle network mask: $mask"
		    fi
		    # /24 netmask
		    mask=255.255.255.0
		    echo "$addr" | sed -e 's/\.[0-9]*$/.*/'
		else
		    echo >&2 "Neither ifconfig(1) nor ip(1)? Not sure how to get primary ip addr and netmask"
		fi
	    else
		echo >&2 "Unexpected host(1) output: $host_out ... cannot get ip addr and netmask"
	    fi
	else
	    echo >&2 "No host(1)? Not sure how to get primary ip addr and netmask"
	fi
    else
	echo >&2 "No hostname(1)? Not sure how to get primary ip addr and netmask"
    fi
}

_usage()
{
    echo "Usage: $0 [options]"
    echo "  -f  force, don't try to guess the version of Python, Qt, ..."
    echo "  -p  generate list of likely packages that should be"
    echo "      installed with dnf or apt-get or yum or ..."
    echo "  -v  verbose (debugging)"
    exit 1
}

force=false
pkglist=false
verbose=false
very_verbose=false
check_manifest=false
check_mainfest_args=''
while getopts 'cfpv?' p
do
    case "$p"
    in
	c)	# exec check-mainfest when manifest has been build
		# ... expert only, so not even mentioned in Usage
		#
		check_manifest=true
		;;

	f)
		force=true
		;;

	p)	# just list most likey package for yum, dnf, apt-get, ...
		pkglist=true
		;;

	v)	if $verbose
		then
		    very_verbose=true
		    check_manifest_args="-vv"
		else
		    verbose=true
		    check_manifest_args="-v"
		fi
		;;

	?)	_usage
		# NOTREACHED
    esac
done
shift `expr $OPTIND - 1`
[ $# -eq 0 ] || _usage

if $verbose
then
    tmp=tmp
    rm -f $tmp.*
else
    tmp=/var/tmp/$$
    trap "rm -f $tmp.*; exit 0" 0 1 2 3 15
fi

if [ -f /etc/pcp.conf ]
then
    . /etc/pcp.conf
else
    # punt!
    #
    if which gawk >/dev/null 2>&1
    then
	PCP_AWK_PROG=gawk
    else
	PCP_AWK_PROG=awk
    fi
fi

# version1 is on line 1
# version2 is on line 2
# relop is "<", "<=", "=", ">=" or ">"
# return value is 0 (true) if version1 relop version2 is true
# else return value is 1
#
_compare()
{
    relop="$1"
    awk -F. >$tmp.compare '
NR == 1	{ for (i = 1; i <= NF; i++)
	    v[i] = $i
	  nv = NF
	  next
	}
NR == 2	{ nf = NF
	  if (nv > nf) nf = nv
	  for (i = 1; i <= nf; i++) {
	    if (v[i]+0 == $i+0) continue
	    if (v[i]+0 < $i+0) {
		print "<"
		exit
	    }
	    if (v[i]+0 > $i+0) {
		print ">"
		exit
	    }
	  }
	  print "="
	}'
    ret=1
    case `cat $tmp.compare`
    in
	"<")
	    [ "$relop" = "<" -o "$relop" = "<=" ] && ret=0
	    ;;
	"=")
	    [ "$relop" = "=" -o "$relop" = "<=" -o "$relop" = ">=" ] && ret=0
	    ;;
	">")
	    [ "$relop" = ">" -o "$relop" = ">=" ] && ret=0
	    ;;
	*)
	    echo "Arrgh ... installed version $version, want $relop $specversion,"
	    echo "but failed to extract relop (`cat $tmp.compare`)"
	    ;;
    esac
    return $ret
}

# add additional and optional directories
for dir in /sbin /usr/sbin
do
    if [ -d "$dir" ]
    then
	if echo ":$PATH:" | grep -q ":$dir:"
	then
	    :
	else
	    export PATH="$PATH:$dir"
	    #debug# echo add $dir to \$PATH
	fi
    fi
done

# Packaging tools we know about.
#	dpkg - Debian-based
#	rpm - RPM-based, e.g. RHEL, CentOS, SuSE, Fedora
#	urpmi - OpenMandriva (also RPM based)
#	emerge - Gentoo
#	pkgin - NetBSD
#	pkg_add - OpenBSD
#	F_pkg - pkg(1) on FreeBSD
#	S_pkg - pkg(1) on OpenIndiana
#	slackpkg - Slackware
#	pacman - Arch Linux
#
pkgtools="dpkg rpm urpmi emerge pkgin pkg_add F_pkg S_pkg slackpkg pacman"

# Distros we know about (or more specifically ones with the same 
# packaging tools but different package names).
#
#	debian		Debian, Ubuntu, LinuxMint, ...
#	redhat		RedHat or Fedora
#	centos		CentOS
#	suse		SLES or OpenSuSE
#	arch		Arch Linux
#	mandriva	OpenMandriva
#
distros="debian redhat centos suse arch mandriva"

# Need directory where check-vm script is located so we can find
# the package.manifest file and the whatami script
#
dir=`echo $0 | sed -e 's/\/*check-vm$//'`
if [ -z "$dir" -o ! -d "$dir" ]
then
    echo "Botch: \$0=$0 -> bad \$dir=$dir ?"
    exit 1
fi
if [ ! -f "$dir"/package.manifest ]
then
    echo "Botch: cannot find $dir/package.manifest"
    exit 1
fi
if [ ! -f "$dir"/whatami ]
then
    echo "Botch: cannot find $dir/whatami"
    exit 1
fi

if $check_manifest
then
    # append original line numbers
    #
    $PCP_AWK_PROG '{ print $0 " :" NR }' <$dir/package.manifest >$tmp.manifest
else
    cat <$dir/package.manifest >$tmp.manifest
fi

if which python >/dev/null 2>&1
then
    # For python-ctypes, check for python before 2.5 ... expect something like
    # Python 2.7.3
    eval `python -V 2>&1 | sed -e 's/Python //' -e 's/^/maj=/' -e 's/\./ min=/' -e 's/\..*//'`
    if [ -n "$maj" -a -n "$min" ]
    then
	rm -f $tmp.need
	if [ "$maj" -lt 2 ]
	then
	    touch $tmp.need
	elif [ "$maj" -eq 2 -a "$min" -lt 5 ]
	then
	    touch $tmp.need
	fi
	[ -f $tmp.need ] && \
	    echo "rpm?	/usr/share/doc/python-ctypes*	[python-ctypes]" >>$tmp.manifest
    fi
fi

# Handle some aliased packaging commands, e.g. pkg(1) is present but
# different on both FreeBSD and OpenIndiana (nee Open Solaris).
# In the package control lines we use F_pkg and S_pkg to differentatiate
# but sort out if we have one or the other here to avoid repeated tests
# in the loop below
#
have_F_pkg=false
have_S_pkg=false
if which pkg >/dev/null 2>&1
then
    if pkg help 2>&1 | grep 'jail(8)' >/dev/null
    then
	# FreeBSD is the only one to have jail(8) in the help text
	#
	have_F_pkg=true
	$verbose && echo "F_pkg -> pkg for FreeBSD"
    else
	have_S_pkg=true
	$verbose && echo "S_pkg -> pkg for OpenIndiana"
    fi
fi

# Strip the packaging-dependent lines that do not apply ...
# this is an optimization remove checks from the main loop below
#
rm -f $tmp.ok
for pkgtype in $pkgtools
do
    want=true
    pkgtool=$pkgtype
    case $pkgtype
    in
	rpm)
	    # Madriva really uses urpmi, but the rpm binary also is installed
	    # so don't include the rpm? lines
	    #
	    which urpmi >/dev/null 2>&1 && want=false
	    # similarly for Slackware where slackpkg is the real packing
	    # tool
	    #
	    which slackpkg >/dev/null 2>&1 && want=false
	    ;;
	pkg_add)
	    # NetBSD really uses pkgin
	    which pkgin >/dev/null 2>&1 && want=false
	    ;;
	S_pkg)
	    $have_S_pkg || want=false
	    pkgtool=pkg
	    ;;
	F_pkg)
	    pkgtool=pkg
	    $have_F_pkg || want=false
	    ;;
    esac

    if which $pkgtool >/dev/null 2>&1 && $want
    then
	$very_verbose && echo "include ${pkgtype}? lines"
	sed -e "s/^${pkgtype}?[ 	]//" <$tmp.manifest >$tmp.tmp
	mv $tmp.tmp $tmp.manifest
	touch $tmp.ok
    else
	$very_verbose && echo "exclude ${pkgtype}? lines"
	grep -v "^${pkgtype}?[ 	]" <$tmp.manifest >$tmp.tmp
	mv $tmp.tmp $tmp.manifest
    fi
done
if [ ! -f $tmp.ok ]
then
    echo "Warning: don't understand what packing is being used here ..."
    echo "         it is none of: $pkgtools"
fi

# Strip the distro-dependent lines that do not apply ...
# this is an optimization remove checks from the main loop below
#
# tests here are copied from $(TOPDIR)/configure.ac
#
[ -f /etc/SuSE-release ] && iam=suse
[ -f /etc/fedora-release ] && iam=fedora
if [ -f /etc/redhat-release ]
then
    iam=redhat
    [ -f /etc/centos-release ] && iam=centos
fi
[ -f /etc/debian_version ] && iam=debian
[ -f /etc/slackware-version ] && iam=slackware
[ -f /etc/gentoo-release ] && iam=gentoo
[ -f /etc/mandriva-release ] && iam=mandriva
[ -f /etc/arch-release ] && iam=arch

for distro in $distros
do
    pick=false
    case "$iam"
    in
	redhat|fedora)
	    [ "$distro" = redhat ] && pick=true
	    ;;
	*)
	    [ "$distro" = "$iam" ] && pick=true
	    ;;
    esac
    if $pick
    then
	$very_verbose && echo "include ${distro}? lines"
	sed -e "s/^${distro}?[ 	]//" <$tmp.manifest >$tmp.tmp
	mv $tmp.tmp $tmp.manifest
    else
	$very_verbose && echo "exclude ${distro}? lines"
	grep -v "^${distro}?[ 	]" <$tmp.manifest >$tmp.tmp
	mv $tmp.tmp $tmp.manifest
    fi
done

# Modify the package inventory for some particular hosts where we've
# explored and _know_ certain packages are not available
#
na=''
case `hostname -s`
in
    bozo)
	# not so much unavailable as unsafe to install on hypervisor
	# and nameserver
	#
	na='docker.io unbound libsoqt5-dev'
	;;
    bozo-laptop)
	na='python3-bcc'
	;;
    bozo-vm)
	na='docker.io python3-bpfcc libsoqt5-dev python-elasticsearch python-openpyxl python-psycopg2'
	;;
    vm00)
	na='libuv1-dev python3-libvirt python3-prometheus-client python3-elasticsearch python3-openpyxl python3-bpfcc libsoqt5-dev python-prometheus-client python-elasticsearch python-openpyxl python-psycopg2'
	;;
    vm01)
	na='python3-bpfcc libsoqt5-dev'
	;;
    vm02)
	na='python-prometheus_client python3-prometheus_client zabbix-agent kubernetes-node qtchooser selinux-policy-devel selinux-policy-targeted'
	;;
    vm03)
	na='python3-prometheus_client'
	;;
    vm04)
	na='python-prometheus_client python-openpyxl qtchooser'
	;;
    vm06)
	na='sensors'
	;;
    vm07)
	na='docker.io'
	;;
    vm08)
	na='python-prometheus_client python-openpyxl qtchooser'
	;;
    vm09)
	na='avahi sysstat valgrind py36-bcc py36-libvirt realpath libibumad libibmad python3-jsonpointer p5-DBD-mysql zabbix-agent py36-prometheus-client mkfs.gfs2 docker qtchooser qt5 uic QtSvg dtrace boost json_reformat py36-imaging nmap' 
	;;
    vm10)
	na='sensors'
	;;
    vm11)
	na='python3-bpfcc docker.io libsoqt5-dev'
	;;
    vm12)
	na='python3-prometheus_client python3-bcc kubernetes-client kubernetes-node'
	;;
    vm14)
	na='systemd-devel libpfm-devel python-prometheus_client python-elasticsearch python-openpyxl socat zabbix-agent docker-io qtchooser qt5-qtbase-devel uic qt5-qtsvg-devel SoQt-devel Coin-devel Net::SNMP YAML::XS::LibYAML libuv-devel kubernetes-client kubernetes-node docker-common'
	;;
    vm15)
    	na='valgrind socat'
    	;;
    vm18)
	na='python3-libvirt python3-prometheus-client python3-elasticsearch python-prometheus-client python-elasticsearch libsoqt5-dev'
	;;
    vm19)
	na='python3-jsonpointer python3-rtslib libvirt-python3 python-prometheus_client python3-elasticsearch zabbix-agent docker-io qtchooser python3-pillow python3-bcc python3-prometheus_client'
	;;
    vm20)
	na='sysv-rc-conf'
	;;
    vm21)
	na='dh-python libpapi-dev libpfm4-dev python-json-pointer python-prometheus-client python-elasticsearch python-openpyxl zabbix-agent gfs2-utils qtchooser qtbase5-dev qtbase5-dev-tools libqt5svg5-dev docker.io libuv-dev libsoqt5-dev'
	;;
    vm22)
	na='python-prometheus_client python3-prometheus_client python3-openpyxl python3-bcc python3-prometheus_client'
	;;
    vm23)
	na='python-prometheus_client python3-prometheus_client python3-bcc kubernetes-client kubernetes-node python3-prometheus_client'
	;;
    vm24)
	na='selinux-policy-targeted selinux-policy-devel SoQt-devel Coin-devel zabbix-agent qtchooser python3-jsonpointer python3-rtslib libvirt-python3 python3-prometheus_client python3-elasticsearch python3-bcc python3-pillow docker-io python3-prometheus_client python-prometheus_client python-elasticsearch'
	;;
    vm25)
	na='python3-jsonpointer python3-rtslib libvirt-python3 python3-lxml python-prometheus_client python3-prometheus_client python3-elasticsearch python-openpyxl python3-openpyxl python3-bcc python3-pillow python3-psycopg2 qtchooser python3-requests'
    	;;
    vm26)
	na='python3-prometheus_client'
	;;
    vm27)
	na='libsoqt5-dev python3-bpfcc'
	;;
    vm28)
	na='systemd-devel libpfm-devel python-prometheus_client python-openpyxl kubernetes-client kubernetes-node realpath libicu-devel qtchooser Coin-devel realpath'
	;;
    vm29)
	na='python-prometheus_client python-elasticsearch perl-YAML-LibYAML perl-Net-SNMP zabbix-agent qtchooser qtchooser SoQt-devel Coin-devel SoQt-devel python-openpyxl libuv-devel'
    	;;
    vm30)
	na='libuv-devel python3-six python3-jsonpointer python3-rtslib libvirt-python3 python3-lxml python-prometheus_client python3-prometheus_client python-elasticsearch python3-elasticsearch python-openpyxl python3-openpyxl python3-bcc python3-pillow kubernetes-client kubernetes-node python3-requests 389-ds-base memcached zabbix-agent gfs2-utils qtchooser qt5-qtbase-devel qt5-qtsvg-devel SoQt-devel Coin-devel SoQt-devel python3-libs yajl python-psycopg2 python3-psycopg2'
	;;
    vm31)
	na='python-prometheus_client' 
	;;
    vm32)
	na='libibumad libibmad sensors'
	;;
    vm34)
	na='umad libpapi libpfm gfs2 python-prometheus-client python2-prometheus-client python2-openpyxl dtrace boost'
	;;
    vm36)
	na='python3-bpfcc libsoqt5-dev'
    	;;
    vm37)
	# qtbase is Qt5 and gcc++ is too old to compile Qt5 headers ... revist
	# if we change from gcc to clang here
	# qtsvg is not needed without Qt5
	# valgrind is available, but segv's
	#
	na='libibumad py36-jsonpointer libvirt-python3 realpath py3-prometheus-client py3-openpyxl py3-bcc qtchooser qtbase qtsvg valgrind'
	;;
esac
if [ -n "$na" ]
then
    for f in $na
    do
# s;[^ 	]*\('"$f"'\);\1;
	sed <$tmp.manifest >$tmp.tmp -e "/$f/{"'
s;\[[^]]*];[N/A on host '"`hostname -s`"'];
}'
	mv $tmp.tmp $tmp.manifest
	$very_verbose && echo "n/a for $f"
    done
fi

if $force
then
    :
else
    # If we are sure which version of Python we're using, remove lines
    # for the other versions
    #
    if [ -n "$PCP_PYTHON_PROG" ]
    then
	if which "$PCP_PYTHON_PROG" >/dev/null 2>&1
	then
	    pyver=`$PCP_PYTHON_PROG --version 2>&1 | sed -e 's/^[^0-9]*//' -e 's/\..*//'`
	    if [ -z "$pyver" ]
	    then
		echo "Warning: cannot get Python version from: `$PCP_PYTHON_PROG --version`"
	    else
		#debug# echo "pyver=$pyver"
		sed <$tmp.manifest >$tmp.tmp -e '/\/python[0-9]/{
    /\/python'"$pyver"'[./]/!d
    }'
		#debug# diff $tmp.manifest $tmp.tmp
		mv $tmp.tmp $tmp.manifest
	    fi
	fi
    fi

    # If we are sure which version of Qt we're using, remove lines for
    # the other versions
    #
    # Logic from Makepkgs
    #
    cull=''
    unset QT_SELECT
    if which qtchooser >/dev/null 2>&1
    then
	if qtchooser -list-versions | grep '^5$' >/dev/null
	then
	    cull=qt4
	else
	    cull=qt5
	fi
    fi
    if [ -n "$cull" ]
    then
	#debug# echo "cull=$cull"
	grep -vi "$cull" <$tmp.manifest >$tmp.tmp
	#debug# diff $tmp.manifest $tmp.tmp
	mv $tmp.tmp $tmp.manifest
    fi
fi

if $check_manifest
then
    echo "Handing off to $dir/check-manifest ..."
    exec $dir/check-manifest $check_manifest_args $tmp
fi

# main loop
#
cat $tmp.manifest \
| sed -e 's/#.*//' -e '/^[ 	]*$/d' \
| while read apps
do
    rm -f $tmp.ok
    rm -f $tmp.echo
    for app in $apps
    do
	# leading ! negates the guard
	case $app
	in
	    !*)
		app=`echo "$app" | sed -e 's/^!//'`
		negate=true
		;;
	    *)
		negate=false
		;;
	esac
	case $app
	in
	    \[*)
	    	break
		;;
	    *\?)
	    	app=`echo $app | sed -e 's/?$//'`
		optional=true
		;;
	    *)
		optional=false
		;;
	esac
	case $app
	in
	    F_pkg|S_pkg)
		app=pkg
		;;
	esac
	case $app
	in
	    \[*)
	    	break
		;;
	    *::)
		# special case Perl, no module name
		echo "use `echo $app | sed -e 's/::$//'`;" | perl >/dev/null 2>&1
		ok=$?
		;;

	    *::*)
		# normal case Perl, with module name
		echo "use $app;" | perl >/dev/null 2>&1
		ok=$?
		;;
	    *)  # file, directory or executable tests, separated by |
		rm -f $tmp.tmp
		for obj in `echo "$app" | sed -e 's/|/ /g'`
		do
		    case "$obj"
		    in
			/*)
			    if [ -f "$obj" -o -d "$obj" ]
			    then
				touch $tmp.tmp
				break
			    fi
			    ;;
			*)
			    if which $obj >/dev/null 2>&1
			    then
				touch $tmp.tmp
				break
			    fi
			    ;;
		    esac
		done
		[ -f $tmp.tmp ]
		ok=$?
		;;
	esac
	if $negate
	then
	    ok=`expr 1 - $ok`
	fi
	if $verbose
	then
	    echo -n "$app ... "
	    $optional && echo -n "[optional] "
	    if [ $ok = 0 ]
	    then
		echo -n "yes "
	    else
		echo -n "no "
	    fi
	    touch $tmp.echo
	fi
	if [ $ok = 0 ]
	then
	    if $optional
	    then
		[ -f $tmp.echo ] && echo
		continue
	    fi
	    touch $tmp.ok
	    break
	else
	    if $optional
	    then
		# guard not true, skip checks for other apps
		touch $tmp.ok
		break
	    fi
	fi
    done
    [ -f $tmp.echo ] && echo
    if [ ! -f $tmp.ok ]
    then
	if $pkglist
	then
	    echo "$apps" \
	    | sed -n \
		-e '/^N\/A/d' \
		-e '/ N\/A/d' \
		-e '/\[N\/A/d' \
		-e 's/QA optional//' \
		-e 's/from cpan//' \
		-e 's/cpan//' \
		-e 's/[A-Za-z][A-Za-z_]*::[A-Za-z][A-Za-z_]*//' \
		-e 's/[A-Za-z][A-Za-z_]*:://' \
		-e 's/[ 	]*\[[ 	()]*]//' \
		-e '/[ 	]\[/{
s/^.*[ 	]\[//
s/]//
s/[ 	].*//
p
n
}' \
		-e 's/  */ /g' \
		-e p \
	    | sed -e '/^ *$/d'

	else
	    echo "Missing: `echo $apps \
		| sed \
		    -e 's/[ 	][ 	]*/ /g' \
		    -e '/ /{
s/? /?@/
:loop1
s/\(\[.*\) /\1@/
t loop1
:loop2
s/ \([^[]\)/@|@\1/
t loop2
s/@/ /g
}'`"
	fi
    fi
done >$tmp.out

if [ -s $tmp.out ]
then
    if $pkglist
    then
	tr '[\012]' ' ' <$tmp.out | sed -e 's/  */ /g' -e 's/^ //' -e 's/ $//'
	echo
    else
	cat $tmp.out
    fi
fi

$pkglist && exit

# Some platform-specific and special case tests
#
if which dpkg >/dev/null 2>&1
then
    # Debian based
    #
    dpkg -l >$tmp.tmp
    for pkg in python-all python-all-dev python3-all python3-all-dev
    do
	if grep "^ii *$pkg" <$tmp.tmp >/dev/null
	then
	    :
	else
	    echo "Need # apt-get install $pkg"
	fi
    done
    # There are some version dependencies in the debian/control file
    # (see Build-Depends and *-Version lines) and some are found in
    # configure.ac ... both need to be mirrored here
    #
    cat <<End-of-File >$tmp.dpkg
# one line per package
# pkg-name	relop	version
# text after # is treated as a comment
# debian/control
debhelper	>=	5
perl		>=	5.6
python		>=	2.6
# configure.ac
libmicrohttpd	>	0.9.9
libcairo2-dev	>=	1.2
End-of-File
    cat $tmp.dpkg \
    | sed -e 's/#.*//' -e '/^[ 	]*$/d' \
    | while read pkg relop ctlversion
    do
	# dpkg -l lines like ...
	# ii  debhelper      9.20131227ub all          ...
	#
	if grep "ii[ 	][ 	]*$pkg[ 	]" $tmp.tmp >/dev/null 2>&1
	then
	    version=`awk <$tmp.tmp '$2 == "'"$pkg"'" { print $3 }'`
	    if [ -z "$version" ]
	    then
		echo "Arrgh ... failed to get version for $pkg from ..."
		cat $tmp.tmp
		continue
	    fi
	    ( echo $version; echo $ctlversion ) | _compare $relop
	    if [ $? = 0 ]
	    then
		$verbose && echo "$pkg: version installed $version, need $relop $ctlversion, OK"
	    else
		echo "Warning: $pkg version installed $version, need $relop $ctlversion"
	    fi
	fi
    done
fi

if which slackpkg >/dev/null 2>&1
then
    # Slackware ...
    :
elif which rpm >/dev/null 2>&1
then
    # RPM based, there are some version dependencies in the spec
    # file (see BuildRequires: lines build/rpm/pcp.spec.in) and some
    # are found in configure.ac ... both need to be mirrored here
    #
    cat <<End-of-File >$tmp.rpm
# one line per rpm
# rpm-name	relop	version	pcp-pkg
# text after # is treated as a comment
# pcp.spec.in
qt-devel|qt4-devel|libqt4-devel|lib64qt4-devel	>=	4.4
libpfm-devel				>=	4.4	pcp-pmda-perfevent
libpfm|libpfm4				>=	4.4	pcp-pmda-perfevent
libibmad-devel|infiniband-diags-devel	>=	1.1.7	pcp-pmda-infiniband
libibmad|libibmad5|infiniband-diags	>=	1.1.7	pcp-pmda-infiniband
libibumad-devel|rdma-core-devel		>=	1.1.7	pcp-pmda-infiniband
libibumad|libibumad3			>=	1.1.7	pcp-pmda-infiniband
End-of-File
    cat $tmp.rpm \
    | sed -e 's/#.*//' -e '/^[ 	]*$/d' \
    | while read rpmlist relop specversion pcp_pkg
    do
	[ -n "$pcp_pkg" ] && pcp_pkg=" for $pcp_pkg"
	rm -f $tmp.found $tmp.notfound
	for rpm in `echo "$rpmlist" | sed -e 's/|/ /g'`
	do
	    rpm -q $rpm >$tmp.tmp 2>/dev/null
	    if grep 'is not installed' $tmp.tmp >/dev/null 2>&1
	    then
		$verbose && echo "$rpm: not installed, need $relop $specversion$pcp_pkg, OK"
		echo "Warning: $rpm not installed, need $relop $specversion$pcp_pkg" >>$tmp.notfound
	    else
		touch $tmp.found
		version=`sed <$tmp.tmp -e "s/^$rpm-//" -e 's/-.*//'`
		( echo $version; echo $specversion ) | _compare $relop
		if [ $? = 0 ]
		then
		    $verbose && echo "$rpm: version installed $version, need $relop $specversion$pcp_pkg, OK"
		else
		    echo "Warning: $rpm version installed $version, need $relop $specversion$pcp_pkg"
		fi
	    fi
	done
	if [ -f $tmp.found ]
	then
	    :
	else
	    $verbose || cat $tmp.notfound
	fi
    done
fi

if which pkg-config >/dev/null 2>&1
then
    # PKG_CHECK_MODULES() in configure.ac
    #
    cat <<End-of-File >$tmp.pkg-config
# one line per rpm
# lib-name	relop	version	pcp-pkg
# text after # is treated as a comment
libmicrohttpd	>	0.9.9
cairo		>=	1.2
cairo-ft	>=	1.2
cairo-png	>=	1.2
End-of-File
    cat $tmp.pkg-config \
    | sed -e 's/#.*//' -e '/^[ 	]*$/d' \
    | while read lib relop version pcp_pkg
    do
	[ -n "$pcp_pkg" ] && pcp_pkg=" for $pcp_pkg"
	libversion=`pkg-config --modversion "$lib" 2>/dev/null`
	if [ -z "$libversion" ]
	then
	    echo "Warning: Package $lib not known to pkg-config , need $relop $version$pcp_pkg"
	else
	    ( echo $libversion; echo $version ) | _compare $relop
	    if [ $? = 0 ]
	    then
		$verbose && echo "$lib: version installed $libversion, need $relop $version$pcp_pkg, OK"
	    else
		echo "Warning: $lib version installed $libversion, need $relop $version$pcp_pkg"
	    fi
	fi
    done
fi

# Networking goo
#
_check_host()
{
    ipaddr=`sed -n </etc/hosts -e '/^#/d' -e '/::/d' -e 's/$/ /' -e "/[ 	]$1[ 	]/"'{
s/[ 	].*//
p
}'`
    if [ -z "$ipaddr" ]
    then
	echo "No /etc/hosts entry for $1"
	return
    fi

    if [ `echo "$ipaddr" | wc -l | sed -e 's/  *//g'` -gt 1 ]
    then
	echo "Multiple /etc/hosts entries for $1"
	return
    fi

    rm -f $tmp.tmp
    if `which ifconfig >/dev/null 2>&1`
    then
	# ifconfig lines of interest look like
	# br0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        #	inet 192.168.1.100  netmask 255.255.255.0  broadcast 192.168.1.255
        # ...
	# lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
	#	inet 127.0.0.1  netmask 255.0.0.0
	#
	ifconfig >$tmp.tmp
    elif `which ip >/dev/null 2>&1`
    then
	ip -f inet address >$tmp.tmp
	# ip lines of interest look like
	# 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc ...
	#     inet 127.0.0.1/8 scope host lo
	#     ...
	# 4: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc ...
	#     inet 192.168.1.100/24 brd 192.168.1.255 scope global br0
	#     ...
    else
	echo >&2 "Neither ifconfig(1) nor ip(1)? Not sure how to get primary ip addr"
	return
    fi
    sed <$tmp.tmp \
	-e 's/^[0-9][0-9]*: //' \
	-e 's/: / /g' \
	-e '/ inet /s/\/.*/ /' \
    | awk '
/^[^ 	]/	{ iface = $1; next }
/inet addr:'$ipaddr' / || /inet '$ipaddr' / {
			  if (iface == "lo")
			    print "Warning: '$1' associated with loopback network interface"
			  found = 1
			  exit
			}
END		{ if (found != 1)
		    print "Warning: '$1' ('$ipaddr') not associated with a network interface"
		}'
}

host=`hostname`
_check_host $host
if which pmhostname >/dev/null 2>&1
then
    pmhost=`pmhostname`
    if [ -z "$pmhost" ]
    then
	echo "Warning: pmhostname returns nothing!"
    else
	case $pmhost
	in
	    $host|$host.*)
		    ;;
	    *)
		    echo "Warning: hostname ($host) is not a prefix of pmhostname ($pmhost)"
		    ;;
	esac
	_check_host $pmhost
    fi
fi

if [ -n "$PCP_VAR_DIR" ]
then
    # need QA access to pmlogger via pmlc from local subnet
    #
    network=`_getnetworkaddr`
    if [ -n "$network" ]
    then
	if [ -f $PCP_VAR_DIR/config/pmlogger/config.default ]
	then
	    if grep -q "allow $network" $PCP_VAR_DIR/config/pmlogger/config.default
	    then
		:
	    else
		echo "Missing: \"allow $network : all;\" [access] in $PCP_VAR_DIR/config/pmlogger/config.default"
		echo "Use \"$ sudo -E .../qa/admin/allow-pmlc-access\" to fix this."
	    fi
	else
	    echo "Warning: \"$PCP_VAR_DIR/config/pcp/pmlogger/config.default\" is missing"
	fi
    else
	echo "Please ignore Warnings from _getnetworkaddr unless you wish to run the"
	echo "full PCP QA suite."
    fi
else
    echo "Warning: \"/etc/pcp.conf\" is missing"
fi

if sudo -u pcp id >/dev/null
then
    # pcp user appears to exist ...
    #
    sudo -u pcp [ -x $HOME ] || echo "Error: $HOME is not searchable by user \"pcp\""
fi

# Now some platform-specific tests
#
$dir/whatami >$tmp.tmp
case "`sed <$tmp.tmp -e 's/  */ /g' -e 's/ \[.*//' | cut -d ' ' -f 4-`"
in
    *OpenBSD*)
	allowkmem=`sysctl kern.allowkmem | sed -e 's/.*=//'`
	if [ "$allowkmem" != 1 ]
	then
	    echo "Warning: kern.allowkmem is \"$allowkmem\" not 1 and so openbsd PMDA will not be able"
	    echo "         to access /dev/kmem"
	    echo "         Suggest adding kern.allowkmem=1 to etc/sysctl.conf and rebooting."
	fi
	;;

esac

$verbose && echo "temp files:" $tmp.*
