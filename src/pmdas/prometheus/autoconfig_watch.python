#!/usr/bin/env pmpython
'''
Performance Metrics Domain Agent exporting Prometheus endpoint metrics.
'''
#
# Copyright (c) 2017 Ronak Jain.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

import os
import json
import time
import errno
import requests
from subprocess import call
from pcp.pmapi import pmContext

interval = 15
pmda_name = "prometheus"
pmdas_dir = pmContext.pmGetConfig('PCP_PMDAS_DIR')
generator = "%s/%s/%s" %(pmdas_dir, pmda_name, "pmdaprometheus.python")
metadata_dir = "%s/%s/metadata/" % (pmdas_dir, pmda_name)

#Identify instances whose config has to be auto generated
def read_configs():
	configs = []
	for root, dirs, files in os.walk(metadata_dir):
		for file in files:
			try:
				path = os.path.join(root, file)
				fobj = open(path)
				metadata = json.load(fobj)
				fobj.close()
				if metadata.get("autoconfig") is not None:
					configs.append({
						"name": metadata.get("name"),
						"endpoint": metadata.get("endpoint")
					})
			except:
				pass
	return configs

def autoconfig():
	configs = read_configs()
	if len(configs) == 0:
		return
	while len(configs) > 0:
		for config in configs:
			try:
				req = requests.get(config["endpoint"])
				status = call([generator, "-g", "-n", config["name"], "-u",
						config["endpoint"]])
				if status == 0:
					configs.remove(config)
			except:
				pass
		time.sleep(interval)

if __name__ == '__main__':
	autoconfig()
